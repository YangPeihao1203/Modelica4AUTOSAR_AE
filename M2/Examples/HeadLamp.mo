within M2.Examples;
model HeadLamp
  import Modelica.SIunits; // Import Modelica SI units library
  Modelica.Units.SI.Voltage voltage;   // Voltage of the car light (V)
  Modelica.Units.SI.Current current;   // Current of the car light (A)
  Modelica.Units.SI.Power  power;       // Power of the car light (W)
  parameter Modelica.Units.SI.Resistance resistance = 10; // Resistance of the car light (Ω)
  parameter Modelica.Units.SI.Power P_max = 10; // Maximum power of the car light (W)
  Real brightness(unit="1"); // Brightness of the car light (unitless, between 0 and 1)
  Modelica.Blocks.Interfaces.RealInput voltageInput // Input voltage signal
    annotation (Placement(transformation(origin={-120.156,-46.7451}, 
extent={{-20,-20},{20,20}})));
  Modelica.Blocks.Interfaces.RealInput switch // Switch signal (on/off)
    annotation (Placement(transformation(origin={-119.529,41.7255}, 
extent={{-20,-20},{20,20}})));
  annotation(Icon(coordinateSystem(extent={{-100,-100},{100,100}}, 
grid={2,2}),graphics = {Ellipse(origin={1.2549,16.03922}, 
lineColor={255,107,8}, 
fillColor={255,255,255}, 
fillPattern=FillPattern.Solid, 
lineThickness=1.2, 
extent={{16.9412,80.3137},{-16.9412,-80.3137}}), Ellipse(origin={5.01961,16.03922}, 
lineColor={255,107,8}, 
fillColor={255,255,255}, 
lineThickness=1.2, 
extent={{-71.8431,80.3137},{71.8431,-80.3137}}), Rectangle(origin={14.2748,12.11765}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-8.94118,73.2549},{8.94118,-73.2549}}), Rectangle(origin={10.8235,82.3921}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={7.84314,-53.6078}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={6.30948,87.0954}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={4.59105,93.6101}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-1.56898,1.7723},{1.56898,-1.7723}}), Rectangle(origin={3.86345,94.9229}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-2.10759,0.900255},{2.10759,-0.900255}}), Rectangle(origin={4.30892,-62.306}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-4.21075,1.38757},{4.21075,-1.38757}}), Rectangle(origin={-48.5556,16.57875}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-26.8549,80.0904},{26.8549,-80.0904}}), Rectangle(origin={-22.592,94.2274}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-12.3905,6.6252},{12.3905,-6.6252}}), Rectangle(origin={-18.8706,99.5586}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-12.3905,6.6252},{12.3905,-6.6252}}), Rectangle(origin={68.5461,103.3741}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-12.3905,6.6252},{12.3905,-6.6252}}), Rectangle(origin={-8.57683,95.8338}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-4.4344,1.23649},{4.4344,-1.23649}}), Rectangle(origin={-6.67004,96.3808}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-3.55904,1.14996},{3.55904,-1.14996}}), Rectangle(origin={-3.33716,95.8758}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.776263,-0.652879},{0.776263,0.652879}}), Rectangle(origin={3.32996,106.3808}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-3.55904,1.14996},{3.55904,-1.14996}}), Rectangle(origin={-1.63073,96.9672}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.631838,0.718011},{0.631838,-0.718011}}), Rectangle(origin={2.17484,88.528}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.631838,0.718011},{0.631838,-0.718011}}), Rectangle(origin={-2.79953,96.0998}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.631838,0.718011},{0.631838,-0.718011}}), Rectangle(origin={-1.55978,96.4985}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.750359,0.225212},{0.750359,-0.225212}}), Rectangle(origin={-2.64679,96.1751}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.631838,0.718011},{0.631838,-0.718011}}), Rectangle(origin={-2.18503,96.4093}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-0.631838,0.718011},{0.631838,-0.718011}}), Rectangle(origin={-21.5756,-58.4655}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={-14.1753,-64.6151}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={-10.8399,-68.2632}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={-8.85955,-69.8266}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={-8.12994,-69.9308}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-5.64706,6.90196},{5.64706,-6.90196}}), Rectangle(origin={-5.89569,-67.6922}, 
fillColor={255,255,255}, 
pattern=LinePattern.None, 
fillPattern=FillPattern.Solid, 
extent={{-4.11272,4.39952},{4.11272,-4.39952}}), Line(origin={-52,80}, 
points={{-29.8824,-0.27451},{30.3529,0.0392157}}, 
color={255,107,8}, 
thickness=1.2), Line(origin={-61.01,40.9019}, 
points={{-18.6765,-0.54902},{18.9706,0.0784314}}, 
color={255,107,8}, 
thickness=1.2), Line(origin={-60.7353,-1.804}, 
points={{-18.6765,-0.54902},{18.9706,0.0784314}}, 
color={255,107,8}, 
thickness=1.2), Line(origin={-52.1176,-48.7843}, 
points={{-29.8824,-0.27451},{30.3529,0.0392157}}, 
color={255,107,8}, 
thickness=0.9), Rectangle(origin={-1.00254,0.427481}, 
fillColor={255,255,255}, 
lineThickness=0.5, 
extent={{-100.173,99.6031},{100.173,-99.6031}}), Text(origin={-0.570062,-82.5164}, 
lineColor={0,0,0}, 
extent={{-85.2242,17.5294},{85.2242,-17.5294}}, 
textString="%name", 
textStyle={TextStyle.None}, 
textColor={0,0,0}, 
horizontalAlignment=LinePattern.None)}));
equation
  voltage = if switch > 0 then voltageInput else 0; // Set voltage based on switch state
  current = voltage / resistance;  // Ohm's law: V = I * R
  power = voltage * current;  // Power calculation: P = V * I
  // Brightness calculation: power / maximum power, ensuring 0 ≤ brightness ≤ 1
  brightness = min(max(power / P_max, 0), 1);
end HeadLamp;